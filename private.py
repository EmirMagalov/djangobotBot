from aiogram import Router, types, F
from aiogram.filters import CommandStart
from get_data import *
import ikbds
import kbds
import logging
from aiogram.types import  InputMediaPhoto
from aiogram.fsm.context import FSMContext
user_private_router=Router()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)
@user_private_router.message(CommandStart())
async def start(message:types.Message,state:FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    b= await banner("home")
    await state.clear()
    await message.answer("üëãüëã",reply_markup=kbds.remove_kb)
    await message.answer_photo(b[0]["photo"], caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!\n\nüî•–°—Ç–∏–ª—å–Ω–æ,–º–æ–¥–Ω–æ,–º–æ–ª–æ–¥–µ–∂–Ω–æüî•", reply_markup=ikbds.get_callback_btns(bt={"–¢–æ–≤–∞—Ä—ã": 'catalog', "FAQ": "faq", "–ö–æ—Ä–∑–∏–Ω–∞ üß∫": "basket_1"}, size_1=2))



@user_private_router.callback_query(F.data.startswith("catalog"))
async def show_catalog(callback:types.CallbackQuery):
    btns = {category['name']: f'category_{category["id"]}' for category in await categ()}
    btns["–ö–æ—Ä–∑–∏–Ω–∞ üß∫ "] = f"basket_1"
    btns["–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"] = f"home"
    b = await banner("category")
    media = InputMediaPhoto(
        media=b[0]["photo"],
        caption="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    await callback.message.edit_media(media=media,reply_markup=ikbds.get_callback_btns(btns,size_1=2))
@user_private_router.callback_query(F.data.startswith("category_"))
async def show_categories(callback:types.CallbackQuery):
    number = int(callback.data.split('_')[-1])
    btns = {sub['name']: f'subcategory_{sub["id"]}' for sub in await subcateg(number)}
    btns["–ö–æ—Ä–∑–∏–Ω–∞ üß∫"] = f"basket_1"
    btns["–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Ü©Ô∏è"] = f"catalog"
    b = await banner("manwomen")
    media = InputMediaPhoto(
        media=b[0]["photo"],
        caption="üôÜ‚Äç‚ôÇÔ∏è/üôÜ‚Äç‚ôÄÔ∏è"
    )
    await callback.message.edit_media(media=media, reply_markup=ikbds.get_callback_btns(btns, size_1=2))


@user_private_router.callback_query(F.data.startswith("subcategory_"))
async def show_subcategories(callback:types.CallbackQuery):
    number = int(callback.data.split('_')[-1])
    prod=await product(number)

    await show_product(callback, prod, 0)


@user_private_router.callback_query(F.data.startswith("forv_"))
async def next_product(callback: types.CallbackQuery):
    subcategory_id, index = map(int, callback.data.split('_')[1:])


    products = await product(subcategory_id)


    if index < len(products):
        await show_product(callback, products, index)
    else:
        await callback.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä.", show_alert=True)

@user_private_router.callback_query(F.data.startswith("back_"))
async def previous_product(callback: types.CallbackQuery):

    subcategory_id, index = map(int, callback.data.split('_')[1:])


    products = await product(subcategory_id)


    if index >= 0:
        await show_product(callback, products, index)
    else:
        await callback.answer("–≠—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä.", show_alert=True)



async def show_product(callback: types.CallbackQuery, products, index):
    current_product = products[index]

    btns = {

    }

    if index > 0:
        btns["–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"] = f"back_{callback.data.split('_')[1]}_{index - 1}"



    if index + 1 < len(products):
        btns["–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"] = f"forv_{callback.data.split('_')[1]}_{index + 1}"




    btns["–ö—É–ø–∏—Ç—å"] = f"buy_{current_product['id']}"
    btns["–ö–æ—Ä–∑–∏–Ω–∞ üß∫"] = f"basket_1"
    btns["–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Ü©Ô∏è"] = f"catalog"
    reply_markup = ikbds.get_callback_btns(btns)
    media = InputMediaPhoto(
        media=current_product['photo'],
        caption=f"–¢–æ–≤–∞—Ä: {current_product['name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {current_product['description']}\n–¶–µ–Ω–∞: {current_product['price']}"
    )
    await callback.message.edit_media(media=media,reply_markup=reply_markup)


@user_private_router.callback_query(F.data.startswith("home"))
async def backhome(callback: types.CallbackQuery):
    b = await banner("home")
    media = InputMediaPhoto(
        media=b[0]["photo"],
        caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {callback.from_user.first_name}!\n\nüî•–°—Ç–∏–ª—å–Ω–æ,–º–æ–¥–Ω–æ,–º–æ–ª–æ–¥–µ–∂–Ω–æüî•"
    )
    await callback.message.edit_media(media=media, reply_markup=ikbds.get_callback_btns(bt={"–¢–æ–≤–∞—Ä—ã": 'catalog', "FAQ": "faq", "–ö–æ—Ä–∑–∏–Ω–∞ üß∫": "basket_1"}, size_1=2))
@user_private_router.callback_query(F.data.startswith("faq"))
async def send_faq(callback:types.CallbackQuery):
    a=await banner("faq")
    faq_text = (
        "ü§î –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "1. –ö–∞–∫ —è –º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?\n"
        "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'. –ó–∞—Ç–µ–º —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.\n\n"
        "2. –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?\n"
        "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã, –≤–∫–ª—é—á–∞—è –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã, PayPal –∏ –¥—Ä—É–≥–∏–µ. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
        "3. –ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞?\n"
        "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 3 –¥–æ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "4. –ú–æ–≥—É –ª–∏ —è –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑?\n"
        "–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ."
    )
    media = InputMediaPhoto(
        media=a[0]["photo"],
        caption=faq_text,

    )
    btns = {

    }
    btns["–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"] = f"home"
    reply_markup = ikbds.get_callback_btns(btns)
    await callback.message.edit_media(media=media, reply_markup=reply_markup)


























@user_private_router.message(F.text=="impossible1369")
async def love(message:types.Message):
    b = await banner("impossible")
    await message.answer_photo(b[0]["photo"],caption="‚ù§Ô∏è‚Äçüî•Impossible to be happy‚ù§Ô∏è‚Äçüî•")

